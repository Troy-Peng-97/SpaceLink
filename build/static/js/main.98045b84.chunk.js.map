{"version":3,"sources":["assets/images/starlink_logo.svg","assets/images/satellite.svg","components/Header.js","constants.js","components/SatSetting.js","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","starlinkLogo","alt","Component","SAT_BASE_URL","NEARBY_SATELLITE","SATELLITE_POSITION_URL","SatSetting","onChangeLong","value","setState","observerLong","onChangeLat","observerLat","onChangeEle","observerElevation","onChangeAlt","satAlt","onDurationChange","duration","showSatellite","props","onShow","state","this","min","max","defaultValue","style","margin","onChange","range","step","marks","0","90","size","onClick","SatelliteList","selected","showMap","onShowMap","e","target","dataInfo","checked","list","addOrRemove","item","status","found","some","entry","satid","push","filter","satInfo","isLoad","satList","above","disabled","length","tip","itemLayout","dataSource","renderItem","Item","actions","Meta","avatar","satellite","title","satname","description","launchDate","prevProps","prevState","snapshot","WorldMap","track","data","hasOwnProperty","Error","len","positions","startTime","observerData","context2","map","now","Date","i","timer","setInterval","timePassed","setSeconds","getSeconds","time","getTime","clearRect","font","fillStyle","textAlign","fillText","d3TimeFormat","width","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","height","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","console","log","message","satData","endTime","urls","url","all","spread","args","ref","Main","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","response","err","Footer","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.98045b84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starlink_logo.28756d25.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite.141ccf71.svg\";","import React, {Component} from 'react';\nimport starlinkLogo  from '../assets/images/starlink_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    SpaceLink: The StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","export const SAT_BASE_URL = \"https://api.n2yo.com/rest/v1/satellite\";\n\nexport const SAT_API_KEY = \"EN6ZLB-TMC4TW-NMLGF9-4IIG\";\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = `${SAT_BASE_URL}/above`;\n\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\nexport const SATELLITE_POSITION_URL = `${SAT_BASE_URL}/positions`;","import React, {Component} from 'react';\nimport { InputNumber, Slider, Button } from 'antd';\n\nclass SatSetting extends Component {\n    constructor(){\n        super();\n        this.state = {\n            observerLat: 0,\n            observerLong: 0,\n            observerElevation: 0,\n            satAlt: 90,\n            duration: [0, 90]\n        }\n    }\n\n    render() {\n        const durationMarkers = { 0: \"0\", 90: \"90\"};\n        const { observerLat, observerLong, observerElevation, satAlt, duration } = this.state;\n\n        return (\n            <div className=\"sat-setting\">\n                <div className=\"loc-setting\">\n                    <p className=\"setting-label\">From Location</p>\n                    <div className=\"setting-list two-item-col\">\n                        <div className=\"list-item\">\n                            <label>Longitude: </label>\n                            <InputNumber min={-180} max={180}\n                                         defaultValue={observerLong}\n                                         style={{margin: \"0 2px\"}}\n                                         onChange={this.onChangeLong} />\n                        </div>\n\n                        <div className=\"list-item right-item\">\n                            <label>Latitude: </label>\n                            <InputNumber min={-90} max={90}\n                                         defaultValue={observerLat}\n                                         style={{margin: \"0 2px\"}}\n                                         onChange={this.onChangeLat} />\n                        </div>\n                    </div>\n\n                    <div className=\"setting-list\">\n                        <div className=\"list-item\">\n                            <label>Elevation(meters):</label>\n                            <InputNumber min={-413} max={8850}\n                                         defaultValue={observerElevation}\n                                         style={{margin: \"0 2px\"}}\n                                         onChange={this.onChangeEle}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"altitude-setting\">\n                    <p className=\"setting-label\">\n                        Restrictions\n                    </p>\n\n                    <div>\n                        <span>Show only satellites which are higher than <br /> altitude</span>\n                        <InputNumber min={0} max={90} defaultValue={90 - satAlt}\n                                     style={{margin: \"8px 2px 0\"}}\n                                     onChange={this.onChangeAlt}/>\n                    </div>\n                </div>\n\n                <div className=\"duration-setting\">\n                    <p className=\"setting-label\">Duration(sec):</p>\n                    <Slider className=\"duration-slider\" range step={1}\n                            defaultValue={duration} min={0} max={90} marks={durationMarkers}\n                            onChange={this.onDurationChange}\n                    />\n                </div>\n\n                <div className=\"show-nearby\">\n                    <Button className=\"show-nearby-btn\" size=\"large\"\n                            onClick={this.showSatellite}\n                    >Find Nearby Satallites</Button>\n                </div>\n            </div>\n        );\n    }\n\n    onChangeLong = value => {\n        this.setState({\n            observerLong: value\n        })\n    }\n\n    onChangeLat = value => {\n        this.setState({\n            observerLat: value\n        })\n    }\n\n    onChangeEle = value => {\n        this.setState({\n            observerElevation: value\n        })\n    }\n\n    onChangeAlt = value => {\n        this.setState({\n            satAlt: 90 - +value\n        })\n    }\n\n    onDurationChange = value => {\n        this.setState({\n            duration: value\n        })\n    }\n\n    showSatellite = () => {\n        this.props.onShow(this.state);\n    }\n}\n\nexport default SatSetting;\n","import React, {Component} from 'react';\nimport { Button, Spin, List, Avatar, Checkbox } from 'antd';\n\nimport satellite from '../assets/images/satellite.svg';\n\nclass SatelliteList extends Component {\n    state = {\n        selected: []\n    }\n\n    render() {\n        const { selected } = this.state;\n        const {satInfo, isLoad} = this.props;\n        const satList = satInfo ? satInfo.above : [];\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button className=\"sat-list-btn\" size=\"large\"\n                        disabled={ selected.length === 0}\n                        onClick={this.showMap} >\n                    Track on the map\n                </Button>\n                <hr/>\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\"/>\n                        </div>\n                        :\n                        <List className=\"sat-list\"\n                            itemLayout=\"horizontal\"\n                              dataSource={satList}\n                              renderItem={ item => (\n                                  <List.Item actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}>\n                                      <List.Item.Meta\n                                          avatar={<Avatar src={satellite} size=\"large\" alt=\"satellite\"/>}\n                                          title={<p>{item.satname}</p>}\n                                          description={`Launch Date: ${item.launchDate}`}\n                                      />\n                                  </List.Item>\n                              )}\n                        />\n                }\n            </div>\n        );\n    }\n\n    showMap = () => {\n        const { selected } = this.state;\n        this.props.onShowMap(selected);\n    }\n\n    onChange = e => {\n        const { dataInfo, checked } = e.target;\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({\n            selected: list\n        })\n    }\n\n    addOrRemove = (item, status, list) => {\n        const found = list.some( entry => entry.satid === item.satid );\n\n        if(status && !found) {\n            list.push(item);\n        }\n\n        if(!status && found) {\n            list = list.filter( entry => entry.satid !== item.satid);\n        }\n\n        return list;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.satInfo !== this.props.satInfo) {\n            this.setState({selected: []})\n        }\n    }\n}\n\nexport default SatelliteList;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport { Spin } from 'antd';\nimport { feature } from 'topojson-client';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport { schemeCategory10  } from 'd3-scale-chromatic';\nimport * as d3Scale from 'd3-scale';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\n\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from '../constants';\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.state = { isLoading: false, isDrawing: false };\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch( e => {\n                console.log('err in fetch map data ', e.message);\n            })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.satData !== this.props.satData) {\n            const { observerLat, observerLong, duration, observerElevation } = this.props.observerData;\n            const endTime = duration[1] * 60;\n            this.setState({ isLoading: true });\n            const urls = this.props.satData.map( sat => {\n                const { satid } = sat;\n                const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerElevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n                return axios.get(url);\n            });\n\n            axios.all(urls)\n                .then(\n                    axios.spread((...args) => {\n                        return args.map(item => item.data);\n                    })\n                )\n                .then( res => {\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if(!prevState.isDrawing) {\n                        this.track(res);\n                    }else{\n                        const oHint = document.getElementsByClassName('hint')[0];\n                        oHint.innerHTML = 'Please wait for these satellite animation to finish before selection new ones!'\n                    }\n                })\n                .catch( e => {\n                    console.log('err in fetch satellite position -> ', e.message);\n                })\n        }\n    }\n\n    track = (data) => {\n        if(!data[0].hasOwnProperty('positions')){\n            throw new Error('no position data');\n        };\n        const len = data[0].positions.length;\n        const { duration: [startTime] } = this.props.observerData;\n        const { context2 } = this.map;\n\n        let now = new Date();\n        let i = startTime;\n\n        let timer = setInterval( () => {\n            let timePassed = Date.now() - now;\n            if(i === startTime) {\n                now.setSeconds(now.getSeconds() + startTime * 60)\n            }\n\n            let time = new Date(now.getTime() + 60 * timePassed);\n            context2.clearRect(0, 0, width, height);\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if(i >= len) {\n                clearInterval(timer);\n                this.setState({isDrawing: false});\n                const oHint = document.getElementsByClassName('hint')[0];\n                oHint.innerHTML = ''\n                return;\n            }\n            data.forEach( sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i])\n            });\n\n            i += 60;\n        }, 1000)\n    }\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n        if(!satlongitude || !satlatitude ) return;\n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join('');\n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2*Math.PI);\n        context2.fill();\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1]+14);\n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {\n                    isLoading ?\n                        <div className=\"spinner\">\n                            <Spin tip=\"Loading...\" size=\"large\"/>\n                        </div> : null\n                }\n                <canvas className=\"map\" ref={this.refMap}/>\n                <canvas className=\"track\" ref={this.refTrack}/>\n                <div className=\"hint\"></div>\n            </div>\n        );\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach( ele => {\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        }\n    }\n}\n\nexport default WorldMap;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from '../constants';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\n\nclass Main extends Component {\n    constructor(){\n        super();\n        this.state = {\n            satInfo: null,\n            satList: null,\n            setting: null,\n            isLoadingList: false\n        }\n    }\n    render() {\n        const { isLoadingList, satInfo, satList, setting } = this.state;\n        return (\n            <div className=\"main\">\n                <div className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite}/>\n                    <SatelliteList isLoad={isLoadingList}\n                                   satInfo={satInfo}\n                                   onShowMap={this.showMap} />\n                </div>\n                <div className=\"right-side\">\n                    <WorldMap satData={satList}\n                              observerData={setting} />\n                </div>\n            </div>\n        );\n    }\n\n    showMap = (selected) => {\n        this.setState(preState => ({\n            ...preState,\n            satList: [...selected]\n        }))\n    }\n\n    showNearbySatellite = (setting) => {\n        this.setState({\n            isLoadingList: true,\n            setting: setting\n        })\n        this.fetchSatellite(setting);\n    }\n\n    fetchSatellite = (setting) => {\n        const {\n            observerLat,\n            observerLong,\n            observerElevation,\n            satAlt,\n        } = setting;\n\n        const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerElevation}/${satAlt}/${STARLINK_CATEGORY}&apiKey=${SAT_API_KEY}`;\n        axios.get(url)\n            .then(response => {\n                console.log(response)\n                this.setState({\n                    satInfo: response.data,\n                    isLoadingList: false\n                })\n            })\n            .catch(err => {\n                console.log('fetch satellite failed -> ', err.message);\n            })\n    }\n}\n\nexport default Main;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Qiankun Peng\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}